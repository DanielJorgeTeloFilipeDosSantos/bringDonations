{"version":3,"sources":["components/BlogNavbar.jsx","services/post-api.js","views/List.jsx","components/PostForm.jsx","views/Create.jsx","views/Post.jsx","views/Edit.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["BlogNavbar","to","postApi","axios","create","baseURL","load","id","Promise","resolve","reject","get","then","response","data","post","catch","error","List","props","state","posts","console","log","setState","this","map","_id","key","Body","Title","title","Text","body","Component","PostForm","onValueChange","bind","onFormSubmit","event","name","target","value","preventDefault","onSubmit","Group","Label","Control","type","placeholder","onChange","children","Create","onFormValueChange","createPost","postData","history","push","Post","match","params","loadPost","previousProps","previousState","Edit","editPost","deletePost","updatedPost","patch","edit","delete","remove","onClick","className","App","path","exact","component","ListView","CreateView","PostView","EditView","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.80b98464.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { Link } from \"react-router-dom\";\n\nconst BlogNavbar = () => {\n  return (\n    <Navbar>\n      <Link to=\"/\">Blog</Link>\n      <Link to=\"/post/create\">+ Create a Post</Link>\n    </Navbar>\n  );\n};\n\nexport default BlogNavbar;\n","import axios from \"axios\";\n\nconst postApi = axios.create({\n  baseURL: \"/api\"\n});\n\nexport const list = () => {\n  return new Promise((resolve, reject) => {\n    postApi\n      .get(\"/\")\n      .then(response => {\n        resolve(response.data.data.posts);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const load = id => {\n  return new Promise((resolve, reject) => {\n    postApi\n      .get(`/post/${id}`)\n      .then(response => {\n        resolve(response.data.data.post);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const edit = (id, updatedPost) => {\n  return new Promise((resolve, reject) => {\n    postApi\n      .patch(`/post/${id}`, updatedPost)\n      .then(response => {\n        resolve(response.data.data.post);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const remove = id => {\n  return new Promise((resolve, reject) => {\n    postApi\n      .delete(`/post/${id}`)\n      .then(() => {\n        resolve();\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n\nexport const create = postData => {\n  return new Promise((resolve, reject) => {\n    postApi\n      .post(\"/post/create\", postData)\n      .then(response => {\n        resolve(response.data.data.post);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n};\n","import React, { Component } from \"react\";\n\nimport { list } from \"./../services/post-api\";\n\nimport { Link } from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\n\nexport default class List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: []\n    };\n    console.log(this.props);\n  }\n\n  componentDidMount() {\n    list()\n      .then(posts => {\n        this.setState({\n          posts\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.posts.map(post => (\n          <Link to={`/post/${post._id}`} key={post._id}>\n            <Card>\n              <Card.Body>\n                <Card.Title>{post.title}</Card.Title>\n                <Card.Text>{post.body}</Card.Text>\n              </Card.Body>\n            </Card>\n          </Link>\n        ))}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\n\nexport default class PostForm extends Component {\n  constructor(props) {\n    super(props);\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onValueChange(event) {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.props.onValueChange({\n      [name]: value\n    });\n  }\n\n  onFormSubmit(event) {\n    event.preventDefault();\n    this.props.onFormSubmit();\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.onFormSubmit}>\n        <Form.Group>\n          <Form.Label>Title</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Post Title\"\n            value={this.props.value.title}\n            onChange={this.onValueChange}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Body</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"body\"\n            placeholder=\"Post Body\"\n            value={this.props.value.body}\n            onChange={this.onValueChange}\n          />\n        </Form.Group>\n        {this.props.children}\n      </Form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport PostForm from \"./../components/PostForm\";\n\nimport { create } from \"./../services/post-api\";\n\nexport default class Create extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: {\n        title: \"\",\n        body: \"\"\n      }\n    };\n    this.onFormValueChange = this.onFormValueChange.bind(this);\n    this.createPost = this.createPost.bind(this);\n  }\n\n  onFormValueChange(data) {\n    this.setState({\n      post: {\n        ...this.state.post,\n        ...data\n      }\n    });\n  }\n\n  createPost() {\n    const post = this.state.post;\n    create(post)\n      .then(post => {\n        this.props.history.push(`/post/${post._id}`);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Create Post</h1>\n        <PostForm\n          value={this.state.post}\n          onValueChange={this.onFormValueChange}\n          onFormSubmit={this.createPost}\n        >\n          <Button type=\"submit\">Create Post</Button>\n        </PostForm>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { load } from \"../services/post-api\";\n\nimport { Link } from \"react-router-dom\";\n\nexport default class Post extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: null\n    };\n  }\n\n  loadPost() {\n    load(this.props.match.params.id)\n      .then(post => {\n        this.setState({\n          post\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  componentDidMount() {\n    this.loadPost();\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    if (\n      !this.state.post ||\n      previousProps.match.params.id !== this.props.match.params.id\n    ) {\n      this.loadPost();\n    }\n  }\n\n  render() {\n    const post = this.state.post;\n    return (\n      (post && (\n        <div>\n          <h1>{post.title}</h1>\n          <p>{post.body}</p>\n          <Link to={`/post/${this.props.match.params.id}/edit`}>Edit Post</Link>\n        </div>\n      )) || <div></div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport PostForm from \"./../components/PostForm\";\n\nimport { edit, load, remove } from \"./../services/post-api\";\n\nexport default class Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      post: {\n        title: \"\",\n        body: \"\"\n      }\n    };\n    this.onFormValueChange = this.onFormValueChange.bind(this);\n    this.editPost = this.editPost.bind(this);\n    this.deletePost = this.deletePost.bind(this);\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    load(id)\n      .then(post => {\n        this.setState({\n          post: {\n            ...post\n          }\n        });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  onFormValueChange(data) {\n    this.setState({\n      post: {\n        ...this.state.post,\n        ...data\n      }\n    });\n  }\n\n  editPost() {\n    const id = this.props.match.params.id;\n    const post = this.state.post;\n    edit(id, post)\n      .then(post => {\n        this.props.history.push(`/post/${post._id}`);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  deletePost() {\n    const id = this.props.match.params.id;\n    remove(id)\n      .then(post => {\n        this.props.history.push(\"/\");\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Edit Post</h1>\n        <PostForm\n          value={this.state.post}\n          onValueChange={this.onFormValueChange}\n          onFormSubmit={this.editPost}\n        >\n          <Button type=\"submit\">Edit Post</Button>\n        </PostForm>\n        <Button onClick={this.deletePost} className=\"btn-danger\">\n          Delete Post\n        </Button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport BlogNavbar from \"./components/BlogNavbar\";\n\nimport ListView from \"./views/List\";\nimport CreateView from \"./views/Create\";\nimport PostView from \"./views/Post\";\nimport EditView from \"./views/Edit\";\n\nimport Container from \"react-bootstrap/Container\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Container>\n          <BlogNavbar />\n          <Switch>\n            <Route path=\"/\" exact component={ListView} />\n            <Route path=\"/post/create\" component={CreateView} />\n            <Route path=\"/post/:id\" exact component={PostView} />\n            <Route path=\"/post/:id/edit\" component={EditView} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}